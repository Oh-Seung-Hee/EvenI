#pragma once

#include "../Global/Define/KGDefine.h"

/*
* 사용자 정의 자료형이란?
* - 언어가 제공해주는 기본 자료형과 달리 프로그램 목적에 맞게 사용자가 정의해서 사용 할 수 있는 자료형을 의미한다. (즉, 사용자 
* 정의 자료형을 활용하면 프로그램에 맞는 전용 자료형을 정의하는 것이 가능하다.)
* 
* 단, 완전한 새로운 자료형을 만드는 것은 불가능하며 기본 자료형을 활용해서 새로운 자료형을 정의 할 수 있다.
* 
* C 사용자 정의 자료형의 종류
* - 구조체
* - 공용체
* - 열거형
* 
* 구조체란?
* - 기본 자료형을 조합해서 하나의 자료형으로 만들어주는 기능을 의미한다. (즉, 연관된 데이터를 그룹화 시킬 수 있는 기능을 
* 의미한다.)
* 
* C 구조체 선언 방법
* - struct + 구조체 이름 + 구조체 맴버 (필드)
* 
* Ex)
* struct STDataSet {
* 	int m_nVal;
* 	float m_fVal;
* 	double m_dblVal;
* };
* 
* 공용체란?
* - 기본 자료형을 조합해서 하나의 자료형으로 만들어주는 기능을 의미한다. (즉, 연관된 데이터를 그룹화 시킬 수 있는 기능을 의미한다.)
* 단, 구조체의 각 맴버는 서로 다른 메모리 공간을 사용하는 반면, 공용체는 모든 맴버가 동일한 메모리 공간을 사용하기 때문에 해당 
* 자료형의 특정 맴버에 값을 할당 할 경우 해당 맴버를 제외한 다른 맴버는 의미없는 값을 지니게 된다는 것을 의미한다. (즉, 데이터를 
* 마지막으로 할당한 맴버만 유효하다는 것을 의미한다.)
* 
* C 공용체 선언 방법
* - union + 공용체 이름 + 공용체 맴버 (필드)
* 
* Ex)
* union UNDataSet {
* 	int m_nVal;
* 	float m_fVal;
* 	double m_dblVal;
* };
* 
* 열거형이란?
* - 심볼릭 상수를 선언 할 수 있는 기능을 의미한다. (즉, 열거형을 활용하면 특별한 의미를 지니는 상수를 선언하는 것이 가능하다.)
* 또한, 열거형은 사용자 정의 자료형이기 때문에 해당 열거형을 사용해서 변수를 선언하는 것 또한 가능하다.
* 
* C 열거형 선언 방법
* - enum + 열거형 이름 + 열거형 상수
* 
* Ex)
* enum EValType {
*	NONE = -1,
*	INT,
* 	FLOAT,
* 	DOUBLE,
* 	MAX_VAL
* };
*/
namespace E09 {
	/** Example 9 */
	int Example_09(int argc, char* args[]);
}
